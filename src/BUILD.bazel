package(default_visibility = ["//visibility:public"])

load("@angular//:index.bzl", "ng_module")
load("@build_bazel_rules_typescript//:defs.bzl", "ts_devserver")

ng_module(
    name = "src",
    srcs = glob(["*.ts"]),
    assets = [
        ":app.component.html",
    ],
    tsconfig = ":tsconfig.json",
    deps = [
        "@angular//packages/core",
        "@angular//packages/common/http",
        "@angular//packages/platform-browser"
    ],
)

# This devserver is written in Go and is super-fast.
# It doesn't run any bundler or code splitter. Instead, it concatenates
# UMD JavaScript code on-the-fly in-memory.
# This scales really well for massive codebases.
ts_devserver(
    name = "devserver",
    # serve these files rooted at /
    additional_root_paths = [
        "angular_bazel_example/node_modules/zone.js/dist",
        "angular_bazel_example/node_modules/tslib",
    ],
    # Start from the development version of the main
    entry_module = "angular_bazel_example/src/main",
    scripts = [
    ],
    # This is the URL we'll point our <script> tag at
    serving_path = "/bundle.min.js",
    # Serve these files in addition to the JavaScript bundle
    static_files = [
        "//:node_modules/zone.js/dist/zone.min.js",
        "//:node_modules/tslib/tslib.js",
        "index.html",
    ],
    # Tell Bazel to build the sources first
    deps = ["//src"],
)

